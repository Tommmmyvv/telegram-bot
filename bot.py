import os
from flask import Flask, request, jsonify
import telebot
from dotenv import load_dotenv
from datetime import datetime
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def create_app():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Flask(__name__)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = telebot.TeleBot(os.getenv('TELEGRAM_BOT_TOKEN'))
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    @app.route('/')
    def home():
        try:
            if not os.getenv('TELEGRAM_BOT_TOKEN'):
                return 'Error: TELEGRAM_BOT_TOKEN not set'
            if not chat_id:
                return 'Error: TELEGRAM_CHAT_ID not set'
                
            bot.send_message(chat_id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            return 'Bot is running and telegram message sent successfully!'
        except Exception as e:
            return f'Error: {str(e)}'

    @app.route('/test')
    def test():
        return jsonify({
            'status': 'ok',
            'telegram_token': bool(os.getenv('TELEGRAM_BOT_TOKEN')),
            'chat_id': bool(chat_id)
        })

    @app.route('/webhook', methods=['GET', 'POST'])
    def webhook():
        try:
            if request.method == 'GET':
                return jsonify({
                    'status': 'webhook is working',
                    'method': 'GET'
                })
                
            data = request.json
            print("\n=== WEBHOOK DATA ===")
            print("Raw data:", json.dumps(data, indent=2))
            
            if isinstance(data, list) and len(data) > 0:
                event = data[0]
                contact = event.get('contact', {})
                variables = contact.get('variables', {})
                event_type = event.get('title')
                
                print("\n=== EVENT INFO ===")
                print("Event type:", event_type)
                print("Contact:", json.dumps(contact, indent=2))
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = contact.get('username') or contact.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                name = contact.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                last_message = contact.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                if event_type in ['new_subscriber', 'bot_unblock', 'unsubscribe', 'bot_block']:
                    action_map = {
                        'new_subscriber': '‚úÖ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –±–æ—Ç–∞',
                        'bot_unblock': 'üîì —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞',
                        'unsubscribe': '‚ùå –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –±–æ—Ç–∞',
                        'bot_block': 'üö´ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞'
                    }
                    
                    message = f"""
<b>–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action_map.get(event_type)}

–ò–º—è: {name}
Telegram: {username}
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
                elif event_type == 'run_custom_flow':
                    message = f"""
üîÑ <b>–°–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä –≤ –±–æ—Ç–µ</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
üí¨ –í—ã–±–æ—Ä: {last_message}
üîÑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {json.dumps(variables, ensure_ascii=False)}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
                elif event_type == 'incoming_message' and last_message != '/start':
                    message = f"""
üìù <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {last_message}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
                else:
                    print(f"Skipping event: {event_type}")
                    return jsonify({'status': 'skipped'})
                    
                print("\n=== SENDING MESSAGE ===")
                print(message)
                bot.send_message(chat_id, message, parse_mode='HTML')
                print("Message sent successfully")
                
            return jsonify({'status': 'success', 'message': 'Webhook processed'})
        except Exception as e:
            print(f"\n=== ERROR ===")
            print(f"Error in webhook: {str(e)}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
            return jsonify({'status': 'error', 'error': str(e)}), 500

    return app

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
