@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    try:
        if request.method == 'GET':
            return jsonify({
                'status': 'webhook is working',
                'method': 'GET'
            })
            
        data = request.json
        print("\n=== WEBHOOK DATA ===")
        print("Raw data:", json.dumps(data, indent=2))
        
        if isinstance(data, list) and len(data) > 0:
            event = data[0]
            contact = event.get('contact', {})
            variables = contact.get('variables', {})
            event_type = event.get('title')
            
            print("\n=== EVENT INFO ===")
            print("Event type:", event_type)
            print("Contact:", json.dumps(contact, indent=2))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = contact.get('username') or contact.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            name = contact.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            last_message = contact.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if event_type in ['new_subscriber', 'bot_unblock', 'unsubscribe', 'bot_block']:
                action_map = {
                    'new_subscriber': '‚úÖ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –±–æ—Ç–∞',
                    'bot_unblock': 'üîì —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞',
                    'unsubscribe': '‚ùå –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –±–æ—Ç–∞',
                    'bot_block': 'üö´ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞'
                }
                
                message = f"""
<b>–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action_map.get(event_type)}

–ò–º—è: {name}
Telegram: {username}
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            elif event_type == 'run_custom_flow':
                message = f"""
üîÑ <b>–°–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä –≤ –±–æ—Ç–µ</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
üí¨ –í—ã–±–æ—Ä: {last_message}
üîÑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {json.dumps(variables, ensure_ascii=False)}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            elif event_type == 'incoming_message' and last_message != '/start':
                message = f"""
üìù <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {last_message}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            else:
                print(f"Skipping event: {event_type}")
                return jsonify({'status': 'skipped'})
                
            print("\n=== SENDING MESSAGE ===")
            print(message)
            bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode='HTML')
            print("Message sent successfully")
            
        return jsonify({'status': 'success', 'message': 'Webhook processed'})
    except Exception as e:
        print(f"\n=== ERROR ===")
        print(f"Error in webhook: {str(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return jsonify({'status': 'error', 'error': str(e)}), 500
