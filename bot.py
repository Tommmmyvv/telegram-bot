import os
from flask import Flask, request, jsonify
import telebot
from dotenv import load_dotenv
from datetime import datetime
import json

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è app
@app.route('/')
def home():
    try:
        if not TELEGRAM_BOT_TOKEN:
            return 'Error: TELEGRAM_BOT_TOKEN not set'
        if not TELEGRAM_CHAT_ID:
            return 'Error: TELEGRAM_CHAT_ID not set'
            
        bot.send_message(TELEGRAM_CHAT_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        return 'Bot is running and telegram message sent successfully!'
    except Exception as e:
        return f'Error: {str(e)}'

@app.route('/test')
def test():
    return jsonify({
        'status': 'ok',
        'telegram_token': bool(TELEGRAM_BOT_TOKEN),
        'chat_id': bool(TELEGRAM_CHAT_ID)
    })

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    try:
        if request.method == 'GET':
            return jsonify({
                'status': 'webhook is working',
                'method': 'GET'
            })
            
        data = request.json
        print("\n=== WEBHOOK DATA ===")
        print("Raw data:", json.dumps(data, indent=2))
        
        if isinstance(data, list) and len(data) > 0:
            event = data[0]
            contact = event.get('contact', {})
            variables = contact.get('variables', {})
            event_type = event.get('title')
            
            print("\n=== EVENT INFO ===")
            print("Event type:", event_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = contact.get('username') or contact.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            name = contact.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            last_message = contact.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == 'bot_block':
                message = f"""
üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            elif event_type == 'new_subscriber':
                message = f"""
‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            elif event_type == 'run_custom_flow':
                message = f"""
üîÑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
üí¨ –í—ã–±–æ—Ä: {last_message}
üîÑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {json.dumps(variables, ensure_ascii=False)}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            elif event_type == 'incoming_message' and last_message != '/start':
                message = f"""
üìù <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

üë§ –ò–º—è: {name}
üì± Telegram: {username}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {last_message}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            else:
                print(f"Skipping event: {event_type}")
                return jsonify({'status': 'skipped'})
                
            print("\n=== SENDING MESSAGE ===")
            print(message)
            bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode='HTML')
            print("Message sent successfully")
            
        return jsonify({'status': 'success', 'message': 'Webhook processed'})
    except Exception as e:
        print(f"\n=== ERROR ===")
        print(f"Error in webhook: {str(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return jsonify({'status': 'error', 'error': str(e)}), 500

# –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
